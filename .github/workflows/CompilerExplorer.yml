# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:  # 必须用 with 包裹参数
        submodules: recursive  # 关键：递归克隆子模块, 操作包含 git submodule update --init --remote
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 自动生成的 Token, 用于更新 submodule

    - name: Check Submodules
      shell: cmd
      run: |
        echo 检查是否更新 Submodules
        dir ThirdParty\CMakeProjectFramework

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: cmd  # 显式指定使用 CMD 解释器
      working-directory: Build/NiflectHelloWorld/Windows
      run: |
        echo 当前工作目录: %cd%
        Generate.bat

    - name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      shell: cmd  # 显式指定使用 CMD 解释器
      working-directory: Build/NiflectHelloWorld/Windows
      run: |
        Build.bat

    - name: Run
      shell: cmd
      working-directory: Build/NiflectHelloWorld/Windows/DefaultBuild/Release/bin
      run: |
        NiflectHelloWorld.exe

    - name: 生成Compiler Explorer链接
      shell: bash
      run: |
        # 替换为你的实际路径
        CPP_FILE="Source/NiflectHelloWorld/NiflectHelloWorld.cpp"
        H_FILE="Source/NiflectHelloWorld/NiflectHelloWorld.h"
        
        # 生成原始文件直链
        CPP_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$CPP_FILE"
        H_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$H_FILE"
        
        # 生成一键直达链接（自动加载两个文件）
        CE_LINK="https://godbolt.org/#g:!((g:!((h:codeEditor,i:(sources:!((name:'main',source:'%23include+%22$H_FILE%22%0A%0A'),(name:'$H_FILE',source:'')))),j:1,load:(urls:!('$CPP_URL','$H_URL')))"
        
        echo "点击查看编译结果: $CE_LINK"